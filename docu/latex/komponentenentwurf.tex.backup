\section{Entwurf der Softwarekomponenten}


\subsection{Funktionalität Client}
Das Programm wird aus der Konsole gestartet. Es müssen folgende Parameter angegeben werden:
\begin{itemize}
	\item -s - Servername oder IP (Servername wird in IP umgewandelt)
	\item -p - Port\footnote{optional, wird sonst auf Default-Port (50000) gesetzt}
	\item -b - Benutzername
	\item -r - Rolle
\end{itemize}
Dabei können Benutzername und Rolle frei gewählt werden. Ist die angegebene Rolle schon belegt, 
wird der Benutzer automatisch als Student eingetragen. \\
Die Darstellung der Tafel, die Eingabe von Text auf der Tafel und die Anwahl von Kommandos
durch Auswahl der Buttons wird durch unterschiedliche Threads realisiert.

\paragraph*{Beispiele: \\}
\code{> ./client 127.0.0.1 50100 michael student} \\
\code{> ./client 127.0.0.1 michael dozent}

\subsubsection{Command-Thread}
Der Command-Thread ist für das Senden von Aufträgen an den Client-Thread im Server zuständig. 
Aufträge werden durch Anwahl eines Buttons getätigt und durch den Command-Thread an den Server geschickt.

\subsubsection{Live-Agent}
Der Live-Agent wird aktiv, wenn sich der Tafelinhalt ändert, d.h. wenn der Eingabefokus auf der
Tafel steht und der Anwender Text eingibt oder verändert. Der Live Agent schickt die Änderungen
in der lokalen Tafel an den Client-Thread im Server. Der Client-Thread übernimmt die Änderungen
in die virtuelle Tafel im Server und sorgt dafür, dass alle angemeldeten Clients die geänderte Tafel
erhalten.

\subsubsection{Listener-Thread}
Der Listener-Thread hört auf Nachrichten von seinem Client-Thread im Server, wertet die Nachrichten aus 
und übernimmt die Verarbeitung der Nachricht im Client. Er ist daher auch für die Aktualisierung der lokalen 
Tafel und der Statusinformationen in der GUI zuständig.

\subsubsection{GUI}
\begin{itemize}
	\item Die virtuelle Tafel wird im mittleren Bereich in der Farbe Grün mit weißer Schrift dargestellt.
	\item Status- und Fehlermeldungen für den Client werden in einem Bereich unter der Tafel angezeigt.
	\item Die Aufträge des Clients an den Server können über Buttons angewählt werden. Die Buttons werden 
in einem Bereich links neben der Tafel angezeigt. Es sind immer nur die Buttons aktiviert, die vom 
Client in seiner jeweiligen Rolle auch angewählt werden können
\end{itemize}

\subsubsection{Tafel-Trigger}
Wenn auf die Tafel geschrieben wird, dann wird ein Timeout-Signal gestartet. Wenn dieses abgelaufen ist, 
wird die Tafel an den Server gesendet und somit an alle Clients verteilt. Bei jeder Änderung wird der 
Timeout zurückgesetzt. Wenn der Timeout 5x zurückgesetzt wurde, dann wird die Tafel dennoch zum Server 
gesendet und der Timeout-Counter zurückgesetzt.

\subsection{Funktionalität Server}
Der Server darf nur genau einmal gestartet werden. Ein wiederholtes Starten des Servers soll erkannt und 
zu einer Fehlermeldung führen. \\
Der Server erzeugt zwei Sohnprozesse, den Logger und den Archivierer. Falls beim Archivierer der Testmodus 
eingeschaltet werden soll, muss der Server dem Archivierer die Periodendauer übergeben. Diese Periodendauer 
erhält der Server beim Starten als Kommandoparameter und gibt den eingegeben Wert an den Archivierer weiter. \\
Für jeden Auftrag, der im Server abgearbeitet wird, erzeugen die beteiligten Threads eine oder mehrere 
Protokollnachricht(en) und senden diese über eine Message-Queue an den Logger. \\

Das Programm wird aus der Konsole gestartet. Es können folgende Parameter angegeben werden:
\begin{itemize}
 \item -p - Port\footnote{optional, sonst wird Default-Port (50000) benutzt.}
 \item -d - Debugging-Mode (ohne Argument)
\end{itemize}

\paragraph*{Beispiele: \\}
\code{> ./server -p 8080 -d} \\
\code{> ./server}

\subsubsection{Login-Thread}
Zur Verwaltung der angemeldeten Clients existiert im Server ein Login-Thread. Jeder Client meldet sich über 
diesen Login-Thread beim Server an und wird bei Erfolg in einer globalen Datenstruktur „Clientliste“ eingetragen. 
Danach wird für jeden Client ein Client-Thread im Server gestartet. Alle Clients-Threads im Server haben Zugriff 
auf die Clientliste.

\subsubsection{Client-Thread}
Der Server erstellt für jeden Client einen eigenen Client-Thread, der auf Aufträge von seinem Client wartet und 
diese Aufträge ausführt. Der Client-Thread hat Zugriff auf die virtuelle Tafel. Er kennt folgende Kommandos:
\begin{itemize}
 \item login
 \item quit
 \item request
 \item shutdown
 \item release
 \item acquire
 \item modify
 \item clear
\end{itemize}

\subsubsection{Broadcasting-Agent}
Der Broadcasting-Agent sendet die Statusnachrichten an alle Clients bei einer Statusänderung. Außerdem ist er für
das versenden der Tafel bei einer Änderung an alle angemeldeten Clients zuständig.

\subsection{Funktionalität Logger}
Der Logger protokolliert alle Protokoll-Meldungen in einer Logdatei.

\subsection{Funktionalität Archivierer}
Der Archivierer ist ein Prozess zum Speichern von Tafelinhalten und ist als Sohnprozess des Servers zu realisieren. \\
Der Archivierer hat 2 Funktionen:
\begin{itemize}
 \item Archivieren des Tafelinhaltes in eine Archivdatei, wenn die virtuelle Tafel gelöscht werden soll
 \item Speichern der Tafel periodisch in eine Debugdatei, wenn der Testmodus eingestellt ist. Die Zeitdauer soll 
einstellbar sein. Der Testmodus und die Zeitdauer wird beim Starten des Archivierers eingestellt.
\end{itemize}
Der Archivierer wird vom Server einmal erzeugt und wartet dann auf einen Trigger. Dieser Trigger wird vom Client-Thread 
gesetzt, wenn die Tafel gelöscht werden soll oder aber von einem Timer, wenn der Testmodus eigestellt ist.

\subsection{Synchronisationsprotokoll}
siehe Petrinetz.

\subsection{IPC-Schnittstellen}

\subsubsection{Shared-Memory}
Die Tafel wird als Shared-Memory realisiert.

\subsubsection{Message-Queues}
Für die Übermittlung der Nachrichten an den Logger wird eine Message-Queue verwendet.

\subsubsection{Semaphore}
Semaphore werden an folgenden Stellen benutzt:
\begin{itemize}
 \item Tafel (binär)
 \item Client-Liste (binär)
\end{itemize}

\subsubsection{Condition-Variablen}
Condition-Variablen werden für den Trigger des Broadcasting-Agent verwendet.

\subsection{Netzwerkschnittstellen}

\subsubsection{Typenübersicht}
\begin{tabular}{c|l|l}
Nr. & Name & Beschreibung \\ \hline
0 & Login & Login-Nachricht \\
1 & Status-Msg & Status-Nachricht \\
2 & Board-Content & Tafel-Inhalt \\
3 & Clear-Board & Tafel löschen \\
4 & Shutdown & System herunterfahren \\
5 & Write-Request & Schreibrecht-Anfrage (Client -> Server) \\
6 & Write-Requested & Schreibrecht-Weiterleitung (Server -> Dozenten) \\
7 & Request-Reply & Schreibrecht-Antwort (Dozenten Client -> Server) \\
255 & Error-Msg & Fehler-Nachricht
\end{tabular}

\subsubsection{Header}
\myfigure{Header}{header.pdf}
\begin{tabular}{lll}
Type: & uint8\_t & | beschreibt den Typ der folgenden Nachricht \\
Lenght: & uint16\_t & | gibt die Anzahl der folgenden Bytes an
\end{tabular}

\subsubsection{Login}
Der Client sendet eine Login Nachricht \\
Der Server antwortet mit einer Status Nachricht oder Fehler Nachricht --> Auf beides reagieren!
\begin{itemize}
	\item Kommt eine ungültige Rolle zurück, dann muss sich der Client beenden
	\item Die Rolle die zurück kommt ist verpflichtend
	\item Der Server schickt die Tafel dem Client die Tafel
\end{itemize}
Nach jedem Login wird eine Status Message an jeden Client gesendet, da sich die Zahl der Studenten
oder Dozenten geändert hat (das selbe gilt für einen Logout).

\myfigure{Login}{login.pdf}
\begin{tabular}{lll}
Role: & uint8\_t & | Egal = 0; Student =  1; Dozent = 2; Alles andere Ungültig! \\
Name: & Char-Array & | Nicht null-terminiert (Length - 1) Bytes lang
\end{tabular}

\subsubsection{Tafelinhalt}
Der Client tippt, und schickt die ganze neue Tafel, der Server nimmt die neue Tafel auf und verteilt 
die Tafel mit einer Board-Content Nachricht an alle, die keine Schreibrechte haben.

\myfigure{Tafelinhalt}{board_content.pdf}
\begin{tabular}{lll}
Board-Content: & Char-Array & | nicht null-terminiert Length Bytes lang
\end{tabular}

\subsubsection{Tafel löschen}
Der Client mit Schreibrechte schickt eine Clear-Board Nachricht an den Server. Der Server triggert 
den Archivierer, löscht den Tafelinhalt und schickt eine leere Tafel an alle Clients. 

\myfigure{Tafel löschen}{clear_board.pdf}

\subsubsection{Schreibrechtanfrage}
\paragraph*{Der Student wünscht sich Schreibrecht: \\}
    Es wird eine Write Request Nachricht an den Server geschickt, dieser leitet eine Write-Requested Nachricht an den Dozenten Client weiter. Der Dozent beantwortet die Anfrage und es wird vom Dozenten Client eine Request-Reply Nachricht an den Server geschickt, dieser verarbeitet diese dann.

\paragraph*{Der Dozent entzieht einem Client das Schreibrecht: \\}
    Vom Dozenten Client wird eine Write-Request an den Server geschickt. Der Server entzieht dem Client mit Schreibrecht das Schreibrecht.

\paragraph*{Der Dozent wünscht sich Schreibrecht: \\}
    Vom Dozenten Client wird eine Write-Request an den Server geschickt. Der Server entzieht dem Client mit Schreibrecht das Schreibrecht und setzt dem Dozenten das Schreibrecht. 

\myfigure{Schreibrechtanfrage C -> S}{write_request.pdf}
\begin{tabular}{lll}
Write-Per: & uint8\_t & | Gewünschtes Schreibrecht
\end{tabular}

\myfigure{Schreibrechtanfrage S -> D}{write_requested.pdf}
\begin{tabular}{lll}
Client-ID: & uint16\_t & | Die ID des Clients der Schreibrecht angefordert hat \\
Name: & Char-Array & | nicht null-terminiert, (Lendth - 2) Bytes lang
\end{tabular}

\myfigure{Schreibrechtanfrage D -> S}{request_reply.pdf}
\begin{tabular}{lll}
Write-Per: & uint8\_t & | Das neue Schreibrecht\\
Client-ID: & uint16\_t & | Die Identifizierungsnummer
\end{tabular}

\subsubsection{Beenden}
Der Dozenten Client sendet den Befehl das System herunter zu fahren. Der Server sendet eine Error-Msg 
mit Error-Code 0 (Servernachricht) und einem Shutdown Text an alle Clients über den Broadcast Agent. 
Der Client zeigt diese Nachricht an. Der Server fährt sich herunter und schließt dabei alle 
Verbindungen. Der Client wartet bis die Verbindung schlussendlich getrennt wird.

\myfigure{Beenden}{shutdown.pdf}

\subsubsection{Status-Nachricht}
Nach jeder Rechteänderung wird eine Statusmeldung an alle Clients gesendet.

\myfigure{Status-Nachricht}{status_nachricht.pdf}
\begin{tabular}{lll}
Role: & uint8\_t & | Student = 1; Dozent = 2 \\
Client-ID: & uint16\_t & | Die Identifizierungsnummer \\
Write-Per: & uint8\_t & | ohne Schreibrecht = 0; mit Schreibrecht = 1 --> alles andere ungültig \\
Dozenten: & uint8\_t & | Anzahl der Dozenten \\
Tutoren: & uint8\_t & | Anzahl der Tutoren \\
Studenten: & uint16\_t & | Anzahl der Studenten
\end{tabular}

\subsubsection{Fehlernachricht}
Fehlermeldungen können über Error-Msg gesendet werden, sowie Benachrichtigungen an den Client.

\myfigure{Fehlernachticht}{error_message.pdf}
\begin{tabular}{lll}
Error-Code: & uint8\_t & | Grobe Beschreibung des Fehlers\\
Detail: & Char-Array & | nicht null-terminierter (length - 1) Bytes lang; Leer möglich!
\end{tabular}